Notes:
    1. Max flow is just choosing the maximum number of paths between source and sink
    2. If you have a problem that tells you choose a[i] or b[i] (or a range)
    choose one of them initially and play a take or leave on the other
    3. Problems that are close to NP problems sometimes have greedy solutions for large input i.e n >=20-30
1. Assignment Problems:
    a. If you see a problem that tells you out of N choose K that has some property (think flows or aliens trick)
    b. If you see a problem that tells for some X choose a Y (think flows)
    c. If the problem tells you to choose a Y from L->R (think range flow i.e putting edges between the same layer)
2. XOR problems:
    a. If the problem tells your something about choosing an XOR of a subset (think FWHT or XOR-basis)
    b. If the problem tells you about getting XOR of a tree path let a[i] = XOR tree from root to i and solve this as an array
    c. If the problem tells you range XOR sth it's better to have prefix XOR and make it pairs XOR.
3. Subset Problems
    a. Problems that tells you what is the number of ways to choose X out of N that has some property (think convolution)

4. Decompositions
    a. If a problem is a sking you to calculate the answer after K steps
    you can calculate the answer for K%squareRoot and for K/SquareRoot
    b. If the nubmer of queries is significintly larger than updates or vice versa
    you can use square root Decompositions to give advantage to one over the other